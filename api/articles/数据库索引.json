{"title":"数据库索引","uid":"dd184b7ce77aa33c95eec0be0f295efa","slug":"数据库索引","date":"2022-12-25T06:32:36.000Z","updated":"2022-12-25T08:50:54.336Z","comments":true,"path":"api/articles/数据库索引.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/yyg2403/picgocdn@master/blogimg/wallhaven-8orwyy.jpg","content":"<h1 id=\"数据库索引\"><a href=\"#数据库索引\" class=\"headerlink\" title=\"数据库索引\"></a>数据库索引</h1><p>在关系型数据库中，索引（index）是一种单独的、物理的对数据库表中的一列或多列的值进行排序的一种存储结构。使用索引可以明显的提高查询数据的效率。</p>\n<h2 id=\"一、数据库索引的原理\"><a href=\"#一、数据库索引的原理\" class=\"headerlink\" title=\"一、数据库索引的原理\"></a>一、数据库索引的原理</h2><p>索引的本质是一种<strong>B+Tree结构</strong>（是一种树型结构）的数据，一个深度为3的B+Tree至少可以维护10亿条数据，所以，使用这种数据结构，只需要执行1~3次IO操作即可发现需要查询的数据，然后查询对应的数据即可。</p>\n<p>在MySQL中，PRIMARY KEY(<strong>主键索引</strong>)、UNIQUE(<strong>唯一索引</strong>)、INDEX(<strong>索引</strong>)、FULLTEXT(<strong>全文索引</strong>)均使用B+Tree结构</p>\n<h2 id=\"二、索引的基本使用\"><a href=\"#二、索引的基本使用\" class=\"headerlink\" title=\"二、索引的基本使用\"></a>二、索引的基本使用</h2><h3 id=\"1、创建索引\"><a href=\"#1、创建索引\" class=\"headerlink\" title=\"1、创建索引\"></a>1、创建索引</h3><p>创建索引时，需要自定义索引名称（如index_username），并指定数据表名称（如 user表），同时还需要在数据表后指定需要创建索引字段名（如username）。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE INDEX index_username ON user(username)</code></pre>\n\n<ul>\n<li>创建索引是比较耗时的操作</li>\n<li>创建索引时一次性的操作</li>\n</ul>\n<h3 id=\"2、删除索引\"><a href=\"#2、删除索引\" class=\"headerlink\" title=\"2、删除索引\"></a>2、删除索引</h3><p>删除索引时，也是需要根据在指定数据表中删除对应索引名称的数据表。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DROP INDEX index_username ON user;</code></pre>\n\n<h3 id=\"3、基于索引特性，需要特别注意的点：\"><a href=\"#3、基于索引特性，需要特别注意的点：\" class=\"headerlink\" title=\"3、基于索引特性，需要特别注意的点：\"></a>3、基于索引特性，需要特别注意的点：</h3><ol>\n<li>索引不会包含null值的列；</li>\n<li>数据量非常少的表没有必要创建索引，如绝大部分的字典表、等级表；</li>\n<li>数据经常变动的表不要创建索引，因为会频繁更新索引，导致写入效率低下；</li>\n<li>查询字段值需要运算时，会导致索引失效，如Where age + 1  &gt;  18  时，索引失效；</li>\n<li>左侧模糊查询时会导致索引失效，左侧模糊意味着左侧全部的满足，无法使用索引，因为索引时基于对数据进行排序得到的。</li>\n</ol>\n<h2 id=\"三、索引的分类与说明\"><a href=\"#三、索引的分类与说明\" class=\"headerlink\" title=\"三、索引的分类与说明\"></a>三、索引的分类与说明</h2><h3 id=\"1、聚集索引与非聚集索引\"><a href=\"#1、聚集索引与非聚集索引\" class=\"headerlink\" title=\"1、聚集索引与非聚集索引\"></a>1、聚集索引与非聚集索引</h3><ul>\n<li><p><strong>聚集索引</strong></p>\n<p><u>指索引项的排序方式和表中数据记录排序方式一致的索引。</u>它会根据聚集索引键的顺序来存储表中的数据，即对表的数据按索引键的顺序进行排序，然后重新存储到磁盘上。因为数据在物理存放只能有一种排列方式，所以一个表只能有一个聚集索引。比如字典中，用拼音查汉字，就是聚集索引。因为正文中字都是按照拼音排序的。而用偏旁部首查汉字，就是非聚集索引，因为正文中的字并不是按照偏旁部首排序的，我们通过检字表得到正文中的字在索引中的映射，然后通过映射找到所需要的字。</p>\n<p>聚集索引使用场合：</p>\n<ul>\n<li>查询命令的回传结果是以该字段为排序依据的；</li>\n<li>查询结果返回一个区间的值；</li>\n<li>查询结果返回某值相同的大量结果集。</li>\n</ul>\n<p><strong>聚集索引会降低insert 、 update操作的性能，需要综合考虑是否使用聚集索引。</strong></p>\n</li>\n<li><p><strong>非聚集索引</strong></p>\n<p><u>与聚集索引相反，索引顺序与物理存储顺序不一致</u>。</p>\n<p>非聚集索引使用场合：</p>\n<ul>\n<li>查询所获得数据量较少时；</li>\n<li>某字段中的数据的唯一性比较高时；</li>\n</ul>\n<p><strong>非聚集索引必须是稠密索引。</strong></p>\n</li>\n</ul>\n<h3 id=\"2、聚簇索引与非聚簇索引\"><a href=\"#2、聚簇索引与非聚簇索引\" class=\"headerlink\" title=\"2、聚簇索引与非聚簇索引\"></a>2、聚簇索引与非聚簇索引</h3><ul>\n<li><p><strong>聚簇索引</strong></p>\n<p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。将数据存储于索引放到了一块，索引结构的叶子节点保存了行数据。</p>\n<p>聚簇索引的特点：<br>1、聚簇索引具有唯一性，由于聚簇索引是将数据跟索引结构放到一块，因此一个表仅有一个聚簇索引。<br>2、表中行的物理顺序和索引中行的物理顺序是相同的，在创建任何非聚簇索引之前创建聚簇索引，这是因为聚簇索引改变了行的物理顺序，数据行，按照一定的顺序排列，并且自动维护这个顺序；<br>3、聚簇索引默认是主键，如果表中没有定义主键，InnoDB会选择一个唯一且非空的索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键（类似oracle中的Rowld）来作为聚簇索引。如果已经设置了主键为聚簇索引又希望再单独设置聚簇索引，必须先删除主键，然后再添加我们想要的聚簇索引，随后恢复设置主键即可。</p>\n</li>\n<li><p><strong>非聚簇索引</strong></p>\n<p>不是聚簇索引的二级索引，也叫作辅助索引，都称为非聚簇索引。将数据与索引分开存储，索引结构的叶子节点指向了数据对应的位置。</p>\n</li>\n</ul>\n<h3 id=\"3、MySQL的MyIsam引擎和InnoDB引擎\"><a href=\"#3、MySQL的MyIsam引擎和InnoDB引擎\" class=\"headerlink\" title=\"3、MySQL的MyIsam引擎和InnoDB引擎\"></a>3、MySQL的MyIsam引擎和InnoDB引擎</h3><p>因为这两种引擎对非聚簇索引和聚簇索引的使用，就是他们之间很大的一个区别。所以结合这两个引擎，再对这两种索引展开些描述就更明了了。</p>\n<p>在InnoDB中，在聚簇索引之上创建的索引称之为 索引，非聚簇索引都是辅助索引，像复合索引，前缀索引，唯一索引。辅助索引叶子节点存储的不再是行的物理位置，而是主键值，辅助索引访问数据总是需要二次查找。</p>\n<p><img src=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASW9ibGl2aWF0ZQ==,size_9,color_FFFFFF,t_70,g_se,x_16.png\" alt=\"在这里插入图片描述\"></p>\n<p>1、InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上，若使用“where id = 14”这样的条件查找主键，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。<br>2、若对Name列进行条件搜索，则需要两个步骤：第一步在辅助索引B+树中检索Name，到达其叶子节点获取对应的主键。第二步使用主键在主索引B+树中再执行一次B+树检索操作，最终到达叶子节点即可获取整行数据。（重点在于通过其他键需要建立辅助索引）</p>\n<p><img src=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/f725ce47683b4bca9412efb854af3341.png\" alt=\"在这里插入图片描述\"></p>\n<p>MyIsam使用的是非聚簇索引，非聚簇索引的两颗B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助索引B+树存储了辅助键。表数据存储在独立的地方，这两棵B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键索引无需访问主键的索引树。</p>\n<p><strong>对比总结：</strong></p>\n<p>1、由于行数据和聚簇索引的叶子节点存储在一起，同一页中会有多条行数据，访问同一数据页不同行记录时，已经把页加载到了Buffer中（缓存器），再次访问时，会在内存中完成访问，不必访问磁盘，这样主键和行数据是一起被载入内存的，找到叶子节点就可以立即将行数据返回了，如果按照主键ID来组织数据，获得数据更快。<br>2、辅助索引的叶子节点，存储主键值，而不是数据的存放地址。好处是当行数据发生改变时，索引树的节点也需要分裂变化；或者是我们需要查找的数据，在上一次IO读写的缓存中没有，需要发生一次新的IO操作时，可以避免对辅助索引的维护工作，只需要维护聚簇索引树就好了，另一个好处是，因为辅助索引存放的是主键值，减少了辅助索引占用的存储空间大小。<br>注：我们知道一次IO读写，可以获取到16K大小的资源，我们称之为读取到的数据区域为Page。而我们的B树，B+树的索引结构，叶子节点上存放好多个关键字（索引值）和对应的数据，都会在一次IO操作中被读取到缓存中，所以在访问同一个页中的不同记录时，会在内存里操作，而不用再次进行IO操作了。除非发生了页的分裂，即要查询的行数据不在上次IO操作的换衬里才会触发新的IO操作。<br>3、因为MyIsam的主索引并非聚簇索引，那么他的数据的物理地址必定是凌乱的，拿到这些物理地址，按照合适的算法进行I/O读取，于是开始不停的寻道不停的旋转。聚簇索引则只需一次I/O。（强烈的对比）<br>4、不过，如果涉及到大数据的排序，全表扫描，count之类的操作的话，还是MyIsam占优势些，因为索引所占空间小，这些操作是需要在内存中完成的。<br>5、当使用主键为聚簇索引时，主键最好不要使用uuid，因为uuid的值太过离散，不适合排序且可能出现新增加记录的uuid，会插入在索引树中间的位置，导致索引树调整复杂度变大，消耗更多的时间和资源。建议使用int类型的自增，方便排序并且默认会在索引树的末尾增加主键值，对索引树的结构影响最小。而且，主键值占用的存储空间越大，辅助索引中保存的主键值也会跟着变大，占用存储空间，也会影响到IO操作读取到的数据量。</p>\n<p>​    </p>\n","feature":"ture","text":"数据库索引在关系型数据库中，索引（index）是一种单独的、物理的对数据库表中的一列或多列的值进行排序的一种存储结构。使用索引可以明显的提高查询数据的效率。 一、数据库索引的原理索引的本质是一种B+Tree结构（是一种树型结构）的数据，一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"数据库;面试","slug":"数据库-面试","count":1,"path":"api/tags/数据库-面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">数据库索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">一、数据库索引的原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">二、索引的基本使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">1、创建索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">2、删除索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%9F%BA%E4%BA%8E%E7%B4%A2%E5%BC%95%E7%89%B9%E6%80%A7%EF%BC%8C%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%AB%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">3、基于索引特性，需要特别注意的点：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%86%E7%B1%BB%E4%B8%8E%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">三、索引的分类与说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">1、聚集索引与非聚集索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">2、聚簇索引与非聚簇索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81MySQL%E7%9A%84MyIsam%E5%BC%95%E6%93%8E%E5%92%8CInnoDB%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">3、MySQL的MyIsam引擎和InnoDB引擎</span></a></li></ol></li></ol></li></ol>","author":{"name":"余有光","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/yyg2403/picgocdn@master/blogimg/qiqi.jpg","link":"/","description":"博主是个懒人，想起来更新博客就会写，取决于灵感来没来或者游戏肝完没有。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"“面试实例（长沙*云保）”","uid":"c48ac82a5256496e0eab6eae5b1c22ec","slug":"“面试实例（长沙-云保）”","date":"2022-12-24T15:48:47.000Z","updated":"2022-12-24T15:52:24.478Z","comments":true,"path":"api/articles/“面试实例（长沙-云保）”.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/yyg2403/picgocdn@master/blogimg/wallhaven-wq1gk7.jpg","text":"第三次面试总结 面试单位：企业名称：爱云保（上海）科技有限公司 项目地址：湖南长沙 行业类型：保险 面试职位：java后端开发 一、自我面试评价： 面试紧张情况有所缓解，他吐词清晰，但是偶尔有磕磕绊绊的情况发生。对java基础知识掌握了大概...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"面试","slug":"面试","count":2,"path":"api/tags/面试.json"}],"author":{"name":"余有光","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/yyg2403/picgocdn@master/blogimg/qiqi.jpg","link":"/","description":"博主是个懒人，想起来更新博客就会写，取决于灵感来没来或者游戏肝完没有。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":"ture"}}